pipeline:
  orgIdentifier: default
  tags: {}
  stages:
    - stage:
        name: Testing
        identifier: Testing
        description: ""
        type: CI
        spec:
          cloneCodebase: true
          caching:
            enabled: false
            paths: []
          buildIntelligence:
            enabled: false
          platform:
            os: Linux
            arch: Amd64
          runtime:
            type: Cloud
            spec: {}
          execution:
            steps:
              - step:
                  type: Run
                  name: Build
                  identifier: Build
                  spec:
                    connectorRef: Plugins_Docker_Hub_Connector
                    image: golang
                    shell: Sh
                    command: |-
                      go build
                      go test ./...
                      sh scripts/build.sh
    - parallel:
        - stage:
            name: Linux amd64
            identifier: Pull_and_Push
            description: ""
            type: CI
            spec:
              cloneCodebase: true
              platform:
                os: Linux
                arch: Amd64
              runtime:
                type: Cloud
                spec: {}
              execution:
                steps:
                  - step:
                      type: Run
                      name: Build Linux binary
                      identifier: Build_Linux_binary
                      spec:
                        connectorRef: Plugins_Docker_Hub_Connector
                        image: golang:1.21
                        shell: Sh
                        command: |-
                          # force go modules
                          export GOPATH=""

                          # disable cgo
                          export CGO_ENABLED=0

                          set -e
                          set -x

                          # linux
                          export GOOS=linux GOARCH=amd64
                          go build -v -a -tags netgo -o release/linux/amd64/plugin .
                  - step:
                      type: Plugin
                      name: Build and push when Tag
                      identifier: Plugin_1
                      spec:
                        connectorRef: Plugins_Docker_Hub_Connector
                        image: plugins/docker
                        settings:
                          username: drone
                          password: <+secrets.getValue("Plugins_Docker_Hub_Pat")>
                          repo: plugins/drone-aws-cli
                          dockerfile: docker/Dockerfile
                          auto_tag: "true"
                          auto_tag_suffix: linux-amd64
                      when:
                        stageStatus: Success
                        condition: |
                          <+codebase.build.type> == "tag"
                  - step:
                      type: BuildAndPushDockerRegistry
                      name: Linux AMD64
                      identifier: Linux_AMD64
                      spec:
                        connectorRef: Plugins_Docker_Hub_Connector
                        repo: plugins/drone-aws-cli
                        tags:
                          - linux-amd64
                        dockerfile: docker/Dockerfile
                      when:
                        stageStatus: Success
                        condition: |
                          <+codebase.build.type> == "branch"
              caching:
                enabled: false
                paths: []
              buildIntelligence:
                enabled: false
        - stage:
            name: Linux arm64
            identifier: linux_arm64
            description: ""
            type: CI
            spec:
              cloneCodebase: true
              platform:
                os: Linux
                arch: Arm64
              runtime:
                type: Cloud
                spec: {}
              execution:
                steps:
                  - step:
                      type: Run
                      name: Build Linux binary
                      identifier: Build_Linux_binary
                      spec:
                        connectorRef: Plugins_Docker_Hub_Connector
                        image: golang:1.21
                        shell: Sh
                        command: |-
                          # force go modules
                          export GOPATH=""

                          # disable cgo
                          export CGO_ENABLED=0

                          set -e
                          set -x

                          # linux
                          export GOOS=linux GOARCH=arm64
                          go build -v -a -tags netgo -o release/linux/arm64/plugin .
                  - step:
                      type: Plugin
                      name: Build and push when Tag
                      identifier: Plugin_1
                      spec:
                        connectorRef: Plugins_Docker_Hub_Connector
                        image: plugins/docker
                        settings:
                          username: drone
                          password: <+secrets.getValue("Plugins_Docker_Hub_Pat")>
                          repo: plugins/drone-aws-cli
                          dockerfile: docker/Dockerfile.linux.arm64
                          auto_tag: "true"
                          auto_tag_suffix: linux-arm64
                      when:
                        stageStatus: Success
                        condition: |
                          <+codebase.build.type> == "tag"
                  - step:
                      type: BuildAndPushDockerRegistry
                      name: Linux ARM64
                      identifier: Linux_ARM64
                      spec:
                        connectorRef: Plugins_Docker_Hub_Connector
                        repo: plugins/drone-aws-cli
                        tags:
                          - linux-arm64
                        caching: false
                        dockerfile: docker/Dockerfile.linux.arm64
                      when:
                        stageStatus: Success
                        condition: |
                          <+codebase.build.type> == "branch"
              caching:
                enabled: false
                paths: []
              buildIntelligence:
                enabled: false
    - stage:
        name: Manifest
        identifier: security_scan
        description: ""
        type: CI
        spec:
          cloneCodebase: true
          platform:
            os: Linux
            arch: Amd64
          runtime:
            type: Cloud
            spec: {}
          execution:
            steps:
              - step:
                  type: Plugin
                  name: Manifest
                  identifier: Manifest
                  spec:
                    connectorRef: Plugins_Docker_Hub_Connector
                    image: plugins/manifest
                    settings:
                      username: drone
                      password: <+secrets.getValue("Plugins_Docker_Hub_Pat")>
                      auto_tag: "true"
                      ignore_missing: "true"
                      spec: docker/manifest.tmpl
                  when:
                    stageStatus: Success
                    condition: <+codebase.build.type> == "tag" || "branch"
          caching:
            enabled: false
            paths: []
          buildIntelligence:
            enabled: false
  allowStageExecutions: true
  properties:
    ci:
      codebase:
        connectorRef: GitHub_Drone_Plugins_Org
        repoName: drone-aws-cli
        build: <+input>
        sparseCheckout: []
  projectIdentifier: Drone_Plugins
  identifier: droneawscliharness
  name: drone-aws-cli-harness
